import pandas as pd
from haversine import haversine

# Sample data
data = pd.DataFrame({
    'BaseDateTime': ['2022-03-31T00:00:01', '2022-03-31T00:00:06', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:01', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:07', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:05', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:01', '2022-03-31T00:00:01',
                     '2022-03-31T00:00:01'],
    'IMO': ['IMO9221322', 'IMO9602344', 'IMO9253583', 'IMO8916607', 'IMO9411305',
            'IMO9304411', 'IMO8512889', 'IMO739103200', 'IMO7621839', 'IMO9260756',
            'IMO9867803', 'IMO7802627', 'IMO367432090', 'IMO9137363', 'IMO9190951',
            'IMO9698288'],
    'LAT': [25.77626, 29.32824, 48.74428, 18.55833, 28.66703, 29.18968,
            26.06004, 28.40915, 18.00574, 29.54576, 28.18381, 46.08923,
            29.78887, 47.79657, 28.41571, 18.24838],
    'LON': [-80.2032, -94.77391, -122.49504, -66.4791, -93.59339, -94.63571,
            -80.13008, -80.66608, -66.7651, -90.70128, -94.41764, -122.9286,
            -92.14719, -122.46426, -80.62341, -64.61832],
    'SOG': [3.2, 2.6, 0.0, 17.5, 9.5, 0.2, 0.0, 0.0, 0.1, 0.0, 10.1, 0.0, 0.0, 17.8, 0.0, 10.4],
    'COG': [143.7, 319.2, 210.3, 274.5, 129.4, 193.5, 46.4, 302.3, 232.9, 231.7, 182.2, 250.0, 269.5, 217.6, 270.1, 244.6]
})

# Convert datetime and sort
data['BaseDateTime'] = pd.to_datetime(data['BaseDateTime'])
data = data.sort_values(['IMO', 'BaseDateTime'])

# Track splitting parameters
DISTANCE_THRESHOLD = 2.0  # Kilometers

def assign_track_ids(group):
    group = group.copy()
    track_id = 1
    prev_lat, prev_lon = None, None
    group['track_id'] = 1  # Initialize track_id
    
    for idx, row in group.iterrows():
        if prev_lat is not None:
            distance = haversine((prev_lat, prev_lon), (row['LAT'], row['LON']))
            if distance > DISTANCE_THRESHOLD:
                track_id += 1
        group.at[idx, 'track_id'] = track_id
        prev_lat, prev_lon = row['LAT'], row['LON']
    return group

# Assign track IDs
data = data.groupby('IMO', group_keys=False).apply(assign_track_ids)




def assign_direction(group):
    # Get initial starting point (first point of the first track)
    initial_lat = group['LAT'].iloc[0]
    initial_lon = group['LON'].iloc[0]
    
    # For each track, compute distance from initial point
    for track_id, track in group.groupby('track_id'):
        start_lat, start_lon = track['LAT'].iloc[0], track['LON'].iloc[0]
        end_lat, end_lon = track['LAT'].iloc[-1], track['LON'].iloc[-1]
        
        # Distance from initial point to track's start and end
        d_start = haversine((initial_lat, initial_lon), (start_lat, start_lon))
        d_end = haversine((initial_lat, initial_lon), (end_lat, end_lon))
        
        # Assign direction
        direction = 'forward' if d_end > d_start else 'backward'
        group.loc[group['track_id'] == track_id, 'direction'] = direction
    return group

# Assign direction labels
data = data.groupby('IMO', group_keys=False).apply(assign_direction)










import pandas as pd
from haversine import haversine

def calculate_metrics(group):
    """
    Calculate distance, velocity, and direction change for a vessel's trajectory.
    
    Args:
        group (pd.DataFrame): A DataFrame group for a specific vessel (grouped by IMO).
        
    Returns:
        pd.DataFrame: The input DataFrame with added columns for distance, velocity, and cog_diff.
    """
    # Sort the vessel's data by timestamp to ensure chronological order
    group = group.sort_values('BaseDateTime').reset_index(drop=True)
    
    # Calculate distance between consecutive points using Haversine formula
    # ---------------------------------------------------------------------
    # Shift latitude and longitude to align current and previous points
    group['prev_lat'] = group['LAT'].shift(1)
    group['prev_lon'] = group['LON'].shift(1)
    
    # Compute distance (in kilometers) using Haversine formula
    group['distance'] = group.apply(
        lambda row: haversine(
            (row['prev_lat'], row['prev_lon']),  # Previous point
            (row['LAT'], row['LON']),            # Current point
            unit='km'
        ) if not pd.isnull(row['prev_lat']) else 0,  # Handle first row (no previous point)
        axis=1
    )
    
    # Calculate time difference between consecutive points (in seconds)
    # -----------------------------------------------------------------
    group['prev_time'] = group['BaseDateTime'].shift(1)
    group['time_diff'] = (group['BaseDateTime'] - group['prev_time']).dt.total_seconds().fillna(0)
    
    # Calculate velocity (km/h) from distance and time difference
    # ----------------------------------------------------------
    # Avoid division by zero by adding a small epsilon (1e-6 seconds)
    group['velocity'] = (group['distance'] / (group['time_diff'] + 1e-6)) * 3600  # Convert to km/h
    
    # Calculate direction change (Î”COG) between consecutive points
    # ------------------------------------------------------------
    group['prev_cog'] = group['COG'].shift(1).fillna(group['COG'])  # Use current COG if no previous
    group['cog_diff'] = (group['COG'] - group['prev_cog']).abs()    # Absolute difference
    
    # Cleanup intermediate columns
    group.drop(['prev_lat', 'prev_lon', 'prev_time', 'prev_cog'], axis=1, inplace=True)
    
    return group

# Sample data (same as provided)
data = pd.DataFrame({
    'BaseDateTime': ['2022-03-31T00:00:01', '2022-03-31T00:00:06', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:01', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:07', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:05', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:01', '2022-03-31T00:00:01',
                     '2022-03-31T00:00:01'],
    'IMO': ['IMO9221322', 'IMO9602344', 'IMO9253583', 'IMO8916607', 'IMO9411305',
            'IMO9304411', 'IMO8512889', 'IMO739103200', 'IMO7621839', 'IMO9260756',
            'IMO9867803', 'IMO7802627', 'IMO367432090', 'IMO9137363', 'IMO9190951',
            'IMO9698288'],
    'LAT': [25.77626, 29.32824, 48.74428, 18.55833, 28.66703, 29.18968,
            26.06004, 28.40915, 18.00574, 29.54576, 28.18381, 46.08923,
            29.78887, 47.79657, 28.41571, 18.24838],
    'LON': [-80.2032, -94.77391, -122.49504, -66.4791, -93.59339, -94.63571,
            -80.13008, -80.66608, -66.7651, -90.70128, -94.41764, -122.9286,
            -92.14719, -122.46426, -80.62341, -64.61832],
    'SOG': [3.2, 2.6, 0.0, 17.5, 9.5, 0.2, 0.0, 0.0, 0.1, 0.0, 10.1, 0.0, 0.0, 17.8, 0.0, 10.4],
    'COG': [143.7, 319.2, 210.3, 274.5, 129.4, 193.5, 46.4, 302.3, 232.9, 231.7, 182.2, 250.0, 269.5, 217.6, 270.1, 244.6]
})

# Preprocess data
data['BaseDateTime'] = pd.to_datetime(data['BaseDateTime'])

# Apply the function to each vessel's data
result = data.groupby('IMO', group_keys=False).apply(calculate_metrics)

# Display results
print(result[['IMO', 'LAT', 'LON', 'distance', 'velocity', 'cog_diff']])



















import pandas as pd
from haversine import haversine

# Sample data
data = pd.DataFrame({
    'BaseDateTime': ['2022-03-31T00:00:01', '2022-03-31T00:00:06', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:01', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:07', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:05', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:01', '2022-03-31T00:00:01',
                     '2022-03-31T00:00:01'],
    'IMO': ['IMO9221322', 'IMO9602344', 'IMO9253583', 'IMO8916607', 'IMO9411305',
            'IMO9304411', 'IMO8512889', 'IMO739103200', 'IMO7621839', 'IMO9260756',
            'IMO9867803', 'IMO7802627', 'IMO367432090', 'IMO9137363', 'IMO9190951',
            'IMO9698288'],
    'LAT': [25.77626, 29.32824, 48.74428, 18.55833, 28.66703, 29.18968,
            26.06004, 28.40915, 18.00574, 29.54576, 28.18381, 46.08923,
            29.78887, 47.79657, 28.41571, 18.24838],
    'LON': [-80.2032, -94.77391, -122.49504, -66.4791, -93.59339, -94.63571,
            -80.13008, -80.66608, -66.7651, -90.70128, -94.41764, -122.9286,
            -92.14719, -122.46426, -80.62341, -64.61832],
    'SOG': [3.2, 2.6, 0.0, 17.5, 9.5, 0.2, 0.0, 0.0, 0.1, 0.0, 10.1, 0.0, 0.0, 17.8, 0.0, 10.4],
    'COG': [143.7, 319.2, 210.3, 274.5, 129.4, 193.5, 46.4, 302.3, 232.9, 231.7, 182.2, 250.0, 269.5, 217.6, 270.1, 244.6]
})

# Convert datetime and sort
data['BaseDateTime'] = pd.to_datetime(data['BaseDateTime'])
data = data.sort_values(['IMO', 'BaseDateTime'])

# Track splitting parameters
DISTANCE_THRESHOLD = 2.0  # Kilometers
TIME_THRESHOLD = pd.Timedelta(minutes=10)  # Adjust based on your needs

def assign_track_ids(group):
    group = group.copy()
    track_id = 1
    prev_lat, prev_lon, prev_time = None, None, None
    group['track_id'] = 1  # Initialize track_id
    
    for idx, row in group.iterrows():
        current_time = row['BaseDateTime']
        if prev_lat is not None and prev_time is not None:
            # Calculate time difference and distance
            time_diff = current_time - prev_time
            distance = haversine((prev_lat, prev_lon), (row['LAT'], row['LON']))
            # Split track if either threshold is exceeded
            if distance > DISTANCE_THRESHOLD or time_diff > TIME_THRESHOLD:
                track_id += 1
        # Update track_id and previous values
        group.at[idx, 'track_id'] = track_id
        prev_lat, prev_lon, prev_time = row['LAT'], row['LON'], current_time
    return group

# Assign track IDs considering both time and distance
data = data.groupby('IMO', group_keys=False).apply(assign_track_ids)

def assign_direction(group):
    # Get initial starting point (first point of the first track)
    initial_lat = group['LAT'].iloc[0]
    initial_lon = group['LON'].iloc[0]
    
    # For each track, compute distance from initial point
    for track_id, track in group.groupby('track_id'):
        start_lat, start_lon = track['LAT'].iloc[0], track['LON'].iloc[0]
        end_lat, end_lon = track['LAT'].iloc[-1], track['LON'].iloc[-1]
        
        # Distance from initial point to track's start and end
        d_start = haversine((initial_lat, initial_lon), (start_lat, start_lon))
        d_end = haversine((initial_lat, initial_lon), (end_lat, end_lon))
        
        # Assign direction
        direction = 'forward' if d_end > d_start else 'backward'
        group.loc[group['track_id'] == track_id, 'direction'] = direction
    return group

# Assign direction labels
data = data.groupby('IMO', group_keys=False).apply(assign_direction)




















import pandas as pd
from haversine import haversine

# Sample data
data = pd.DataFrame({
    'BaseDateTime': ['2022-03-31T00:00:01', '2022-03-31T00:00:06', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:01', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:00', '2022-03-31T00:00:07', '2022-03-31T00:00:04',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:05', '2022-03-31T00:00:09',
                     '2022-03-31T00:00:01', '2022-03-31T00:00:01', '2022-03-31T00:00:01',
                     '2022-03-31T00:00:01'],
    'IMO': ['IMO9221322', 'IMO9602344', 'IMO9253583', 'IMO8916607', 'IMO9411305',
            'IMO9304411', 'IMO8512889', 'IMO739103200', 'IMO7621839', 'IMO9260756',
            'IMO9867803', 'IMO7802627', 'IMO367432090', 'IMO9137363', 'IMO9190951',
            'IMO9698288'],
    'LAT': [25.77626, 29.32824, 48.74428, 18.55833, 28.66703, 29.18968,
            26.06004, 28.40915, 18.00574, 29.54576, 28.18381, 46.08923,
            29.78887, 47.79657, 28.41571, 18.24838],
    'LON': [-80.2032, -94.77391, -122.49504, -66.4791, -93.59339, -94.63571,
            -80.13008, -80.66608, -66.7651, -90.70128, -94.41764, -122.9286,
            -92.14719, -122.46426, -80.62341, -64.61832],
    'SOG': [3.2, 2.6, 0.0, 17.5, 9.5, 0.2, 0.0, 0.0, 0.1, 0.0, 10.1, 0.0, 0.0, 17.8, 0.0, 10.4],
    'COG': [143.7, 319.2, 210.3, 274.5, 129.4, 193.5, 46.4, 302.3, 232.9, 231.7, 182.2, 250.0, 269.5, 217.6, 270.1, 244.6]
})

# Convert datetime and sort
data['BaseDateTime'] = pd.to_datetime(data['BaseDateTime'])
data = data.sort_values(['BaseDateTime', 'IMO'])

# Track splitting parameters
DISTANCE_THRESHOLD = 2.0  # Kilometers
TIME_THRESHOLD = pd.Timedelta(minutes=10)  # Adjust based on your needs

# Function to assign track IDs considering proximity across IMOs
def assign_track_ids(data):
    data = data.copy()
    data['track_id'] = None
    track_id = 1

    # Iterate through each timestamp
    for timestamp, group in data.groupby('BaseDateTime'):
        # Iterate through each point in the group
        for idx, row in group.iterrows():
            if pd.isna(data.at[idx, 'track_id']):  # If track_id is not assigned
                data.at[idx, 'track_id'] = track_id
                # Assign the same track_id to nearby points within the same timestamp
                for idx2, row2 in group.iterrows():
                    if pd.isna(data.at[idx2, 'track_id']):
                        distance = haversine((row['LAT'], row['LON']), (row2['LAT'], row2['LON']))
                        if distance <= DISTANCE_THRESHOLD:
                            data.at[idx2, 'track_id'] = track_id
                track_id += 1
    return data

# Assign track IDs considering proximity across IMOs
data = assign_track_ids(data)

# Function to assign direction labels
def assign_direction(group):
    # Get initial starting point (first point of the first track)
    initial_lat = group['LAT'].iloc[0]
    initial_lon = group['LON'].iloc[0]
    
    # For each track, compute distance from initial point
    for track_id, track in group.groupby('track_id'):
        start_lat, start_lon = track['LAT'].iloc[0], track['LON'].iloc[0]
        end_lat, end_lon = track['LAT'].iloc[-1], track['LON'].iloc[-1]
        
        # Distance from initial point to track's start and end
        d_start = haversine((initial_lat, initial_lon), (start_lat, start_lon))
        d_end = haversine((initial_lat, initial_lon), (end_lat, end_lon))
        
        # Assign direction
        direction = 'forward' if d_end > d_start else 'backward'
        group.loc[group['track_id'] == track_id, 'direction'] = direction
    return group

# Assign direction labels
data = data.groupby('IMO', group_keys=False).apply(assign_direction)

print(data)


============================


import pandas as pd
from haversine import haversine

# Sample data (replace with your actual data)
df = data.copy()

# Define thresholds
DISTANCE_THRESHOLD = 2.0  # Kilometers (adjust as needed)

# Step 1: Get track boundaries
track_boundaries = df.groupby(['IMO', 'track_id']).agg(
    start_lat=('LAT', 'first'),
    start_lon=('LON', 'first'),
    end_lat=('LAT', 'last'),
    end_lon=('LON', 'last'),
    start_time=('BaseDateTime', 'first'),
    end_time=('BaseDateTime', 'last')
).reset_index()

# Step 2: Sort tracks by start_time for chronological processing
track_boundaries = track_boundaries.sort_values(['IMO', 'start_time'])

# Step 3: Identify merges
merge_map = {}
current_group = 1

for imo in track_boundaries['IMO'].unique():
    imo_tracks = track_boundaries[track_boundaries['IMO'] == imo]
    prev_track = None
    
    for _, row in imo_tracks.iterrows():
        if prev_track is None:
            # Initialize first track
            merge_map[(imo, row['track_id'])] = current_group
            prev_track = row
        else:
            # Calculate distance between end of previous track and start of current track
            prev_end = (prev_track['end_lat'], prev_track['end_lon'])
            curr_start = (row['start_lat'], row['start_lon'])
            distance = haversine(prev_end, curr_start)
            
            if distance <= DISTANCE_THRESHOLD:
                # Merge with previous group
                merge_map[(imo, row['track_id'])] = merge_map[(imo, prev_track['track_id'])]
            else:
                # New group
                current_group += 1
                merge_map[(imo, row['track_id'])] = current_group
                prev_track = row

# Step 4: Apply merged track_ids to original DataFrame
df['merged_track_id'] = df.apply(
    lambda x: merge_map.get((x['IMO'], x['track_id']), x['track_id']), axis=1
)

# Optional: Drop the original track_id if needed
df = df.drop(columns=['track_id']).rename(columns={'merged_track_id': 'track_id'})





import pandas as pd
from haversine import haversine

# Load your DataFrame (replace with your data)
df = data.copy()

# Define merging parameters
DISTANCE_THRESHOLD = 2.0  # Kilometers (adjust as needed)

# Step 1: Get track boundaries (start/end points)
track_info = df.groupby(['IMO', 'track_id']).agg(
    start_lat=('LAT', 'first'),
    start_lon=('LON', 'first'),
    end_lat=('LAT', 'last'),
    end_lon=('LON', 'last')
).reset_index()

# Step 2: For each IMO, check all track pairs
from itertools import combinations

def merge_tracks(imo_group):
    tracks = imo_group.to_dict('records')
    n = len(tracks)
    parent = list(range(n))  # Union-Find data structure

    def find(u):
        while parent[u] != u:
            parent[u] = parent[parent[u]]
            u = parent[u]
        return u

    def union(u, v):
        pu, pv = find(u), find(v)
        if pu != pv:
            parent[pv] = pu

    # Check all track pairs
    for i, j in combinations(range(n), 2):
        track_i = tracks[i]
        track_j = tracks[j]
        
        # Calculate distances between all combinations of start/end points
        distances = [
            haversine((track_i['end_lat'], track_i['end_lon']), 
                     (track_j['start_lat'], track_j['start_lon'])),
            haversine((track_i['start_lat'], track_i['start_lon']), 
                     (track_j['end_lat'], track_j['end_lon'])),
            haversine((track_i['end_lat'], track_i['end_lon']), 
                     (track_j['end_lat'], track_j['end_lon'])),
            haversine((track_i['start_lat'], track_i['start_lon']), 
                     (track_j['start_lat'], track_j['start_lon']))
        ]
        
        # Merge if any distance is below threshold
        if min(distances) <= DISTANCE_THRESHOLD:
            union(i, j)

    # Assign merged track_id based on connected components
    component = {}
    for idx in range(n):
        root = find(idx)
        if root not in component:
            component[root] = len(component) + 1
        tracks[idx]['merged_track_id'] = component[root]

    return pd.DataFrame(tracks)

# Step 3: Apply merging to all IMO groups
merged_tracks = track_info.groupby('IMO', group_keys=False).apply(merge_tracks)

# Step 4: Map merged_track_id back to original DataFrame
df = df.merge(
    merged_tracks[['IMO', 'track_id', 'merged_track_id']],
    on=['IMO', 'track_id'],
    how='left'
)

# Optional: Rename the merged track_id
df = df.drop(columns=['track_id']).rename(columns={'merged_track_id': 'track_id'})

















import pandas as pd
from haversine import haversine
from itertools import combinations

# Load your DataFrame (replace with your data)
df = data.copy()

# Define merging parameters
DISTANCE_THRESHOLD = 2.0  # Kilometers (adjust as needed)

# Step 1: Group points by track_id and IMO
track_points = df.groupby(['IMO', 'track_id']).apply(
    lambda x: list(zip(x['LAT'], x['LON']))
track_points = track_points.reset_index(name='coordinates')

# Step 2: For each IMO, check all track pairs
def merge_side_by_side_tracks(imo_group):
    tracks = imo_group.to_dict('records')
    n = len(tracks)
    parent = list(range(n))  # Union-Find for connected components

    def find(u):
        while parent[u] != u:
            parent[u] = parent[parent[u]]
            u = parent[u]
        return u

    def union(u, v):
        pu, pv = find(u), find(v)
        if pu != pv:
            parent[pv] = pu

    # Check all pairs of tracks for spatial proximity
    for i, j in combinations(range(n), 2):
        track_i = tracks[i]['coordinates']
        track_j = tracks[j]['coordinates']
        
        # Check if any point in track_i is close to any point in track_j
        for (lat1, lon1) in track_i:
            for (lat2, lon2) in track_j:
                if haversine((lat1, lon1), (lat2, lon2)) <= DISTANCE_THRESHOLD:
                    union(i, j)
                    break  # No need to check further if merged
            else:
                continue
            break  # Break outer loop if merged

    # Assign merged_track_id based on connected components
    component = {}
    for idx in range(n):
        root = find(idx)
        if root not in component:
            component[root] = len(component) + 1
        tracks[idx]['merged_track_id'] = component[root]

    return pd.DataFrame(tracks)

# Step 3: Apply merging to all IMO groups
merged_tracks = track_points.groupby('IMO', group_keys=False).apply(merge_side_by_side_tracks)

# Step 4: Map merged_track_id back to original DataFrame
df = df.merge(
    merged_tracks[['IMO', 'track_id', 'merged_track_id']],
    on=['IMO', 'track_id'],
    how='left'
)

# Optional: Rename the merged track_id
df = df.drop(columns=['track_id']).rename(columns={'merged_track_id': 'track_id'})
