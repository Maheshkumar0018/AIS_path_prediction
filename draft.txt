import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Number of future steps
future_steps = 10
future_predictions = []

# Initialize input sequence from the last test sample
input_seq = X_test[-1].reshape(1, seq_length, X_train.shape[2])  # Match input shape

for _ in range(future_steps):
    pred = model.predict([input_seq, input_seq], verbose=0)  # Both encoder & decoder inputs
    
    future_predictions.append(pred[0, -1, :])  # Take last predicted timestep

    # Shift input sequence and insert new prediction
    input_seq = np.roll(input_seq, -1, axis=1)
    input_seq[0, -1, :] = future_predictions[-1]  # Insert prediction into last time step

# Convert to NumPy array
future_predictions = np.array(future_predictions)

# ðŸ”¥ Remove the last feature (8th column) before inverse scaling
future_predictions = future_predictions[:, :-1]  # Exclude last column

# Convert predictions back to original scale
future_predictions = scaler.inverse_transform(future_predictions)

# âœ… Ensure column count matches predictions
expected_columns = df.columns[:future_predictions.shape[1]]  # Select the correct number of columns

# Create timestamps for predicted values
forecast_df = pd.DataFrame(future_predictions, columns=expected_columns)

# ðŸ”¹ Plot Actual vs. Predicted Values
plt.figure(figsize=(10, 5))
plt.plot(df["x"], label="Actual X", color="blue")
plt.plot(forecast_df["x"], label="Predicted X", color="red", linestyle="dashed")
plt.legend()
plt.xlabel("Time")
plt.ylabel("Value")
plt.title("Future Predictions")
plt.grid()
plt.show()

print(forecast_df)
